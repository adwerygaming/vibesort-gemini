{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { GoogleGenAI } from \"@google/genai\";\r\nimport { GoogleAIModels, SortModes, VibesortGeminiConstructor, VibesortGeminiResponse } from \"./types/VibesortTypes.js\";\r\n\r\nexport class VibesortGemini {\r\n    private model: GoogleAIModels;\r\n    private client: GoogleGenAI;\r\n\r\n    constructor({ apiKey, model }: VibesortGeminiConstructor) {\r\n        this.client = new GoogleGenAI({ apiKey });\r\n        this.model = model ?? \"gemini-2.5-flash\"\r\n    }\r\n\r\n    private async cleanOutput(input: string) {\r\n        const cleanedJson = input.replace(\"\\`\\`\\`json\", \"\").replace(\"\\`\\`\\`\", \"\")\r\n        const parsedJson = JSON.parse(cleanedJson)\r\n\r\n        return parsedJson\r\n    }\r\n\r\n    async sort(input: number[], sortMode: SortModes = \"ascending\"): Promise<VibesortGeminiResponse<number[]>> {\r\n        const promt: string = `You are a sorting function.\\nSort the following array of numbers in ${sortMode} order.\\nReturn only a valid JSON array. Do not include any text, explanation, or formatting outside the array.\\n\\nInput: ${input}`\r\n\r\n        try {\r\n            const ai = await this.client.models.generateContent({ model: this.model, contents: promt });\r\n    \r\n            const rawContent = ai.text\r\n    \r\n            if (!rawContent) {\r\n                return { data: null, error: \"no_response\" }\r\n            }\r\n\r\n            const parsedJson = await this.cleanOutput(rawContent)\r\n            let output: number[] = []\r\n            \r\n            if (Array.isArray(parsedJson) && parsedJson.every(n => typeof n === \"number\")) {\r\n                output = parsedJson\r\n            } else {\r\n                return { data: null, error: \"not_a_number_response\"}\r\n            }\r\n\r\n            return { data: output, error: null }\r\n        } catch (e) {\r\n            return { data: null, error: e }\r\n        }\r\n    }\r\n\r\n    async sortString(input: string[], sortMode: SortModes = \"ascending\"): Promise<VibesortGeminiResponse<string[]>> {\r\n        const promt: string = `You are a sorting function.\\nSort the following array of strings in ${sortMode} order.\\nReturn only a valid JSON array. Do not include any text, explanation, or formatting outside the array.\\n\\nInput: ${input}`\r\n\r\n        try {\r\n            const ai = await this.client.models.generateContent({ model: this.model, contents: promt });\r\n\r\n            const rawContent = ai.text\r\n\r\n            if (!rawContent) {\r\n                return { data: null, error: \"no_response\" }\r\n            }\r\n\r\n            const parsedJson = await this.cleanOutput(rawContent)\r\n            let output: string[] = []\r\n\r\n            if (Array.isArray(parsedJson) && parsedJson.every(n => typeof n === \"string\")) {\r\n                output = parsedJson\r\n            } else {\r\n                return { data: null, error: \"not_a_string_response\" }\r\n            }\r\n\r\n            return { data: output, error: null }\r\n        } catch (e) {\r\n            return { data: null, error: e }\r\n        } \r\n    }\r\n}"],"mappings":"AAAA,SAAS,mBAAmB;AAGrB,MAAM,eAAe;AAAA,EAIxB,YAAY,EAAE,QAAQ,MAAM,GAA8B;AACtD,SAAK,SAAS,IAAI,YAAY,EAAE,OAAO,CAAC;AACxC,SAAK,QAAQ,wBAAS;AAAA,EAC1B;AAAA,EAEA,MAAc,YAAY,OAAe;AACrC,UAAM,cAAc,MAAM,QAAQ,WAAc,EAAE,EAAE,QAAQ,OAAU,EAAE;AACxE,UAAM,aAAa,KAAK,MAAM,WAAW;AAEzC,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,KAAK,OAAiB,WAAsB,aAAwD;AACtG,UAAM,QAAgB;AAAA,yCAAuE,QAAQ;AAAA;AAAA;AAAA,SAA6H,KAAK;AAEvO,QAAI;AACA,YAAM,KAAK,MAAM,KAAK,OAAO,OAAO,gBAAgB,EAAE,OAAO,KAAK,OAAO,UAAU,MAAM,CAAC;AAE1F,YAAM,aAAa,GAAG;AAEtB,UAAI,CAAC,YAAY;AACb,eAAO,EAAE,MAAM,MAAM,OAAO,cAAc;AAAA,MAC9C;AAEA,YAAM,aAAa,MAAM,KAAK,YAAY,UAAU;AACpD,UAAI,SAAmB,CAAC;AAExB,UAAI,MAAM,QAAQ,UAAU,KAAK,WAAW,MAAM,OAAK,OAAO,MAAM,QAAQ,GAAG;AAC3E,iBAAS;AAAA,MACb,OAAO;AACH,eAAO,EAAE,MAAM,MAAM,OAAO,wBAAuB;AAAA,MACvD;AAEA,aAAO,EAAE,MAAM,QAAQ,OAAO,KAAK;AAAA,IACvC,SAAS,GAAG;AACR,aAAO,EAAE,MAAM,MAAM,OAAO,EAAE;AAAA,IAClC;AAAA,EACJ;AAAA,EAEA,MAAM,WAAW,OAAiB,WAAsB,aAAwD;AAC5G,UAAM,QAAgB;AAAA,yCAAuE,QAAQ;AAAA;AAAA;AAAA,SAA6H,KAAK;AAEvO,QAAI;AACA,YAAM,KAAK,MAAM,KAAK,OAAO,OAAO,gBAAgB,EAAE,OAAO,KAAK,OAAO,UAAU,MAAM,CAAC;AAE1F,YAAM,aAAa,GAAG;AAEtB,UAAI,CAAC,YAAY;AACb,eAAO,EAAE,MAAM,MAAM,OAAO,cAAc;AAAA,MAC9C;AAEA,YAAM,aAAa,MAAM,KAAK,YAAY,UAAU;AACpD,UAAI,SAAmB,CAAC;AAExB,UAAI,MAAM,QAAQ,UAAU,KAAK,WAAW,MAAM,OAAK,OAAO,MAAM,QAAQ,GAAG;AAC3E,iBAAS;AAAA,MACb,OAAO;AACH,eAAO,EAAE,MAAM,MAAM,OAAO,wBAAwB;AAAA,MACxD;AAEA,aAAO,EAAE,MAAM,QAAQ,OAAO,KAAK;AAAA,IACvC,SAAS,GAAG;AACR,aAAO,EAAE,MAAM,MAAM,OAAO,EAAE;AAAA,IAClC;AAAA,EACJ;AACJ;","names":[]}